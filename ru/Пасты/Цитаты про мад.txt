ИМХО, от движка нужна лёгкость его модификации главным образом.


Причем модификации неспециалистами.
А это значит тонны документации и гениально спроектированный код.

Яб еще добавил "готовые сервисы".
Всё банальное должно быть уже интегрировано.

Hot reboot без сомненья.
Без сомненья jail для скриптов, причем такой, чтобы не могло падать даже теоретически.
Вообще хотелось бы что-то типа 1зона-1процесс, чтобы любые проблемы в одних зонах
не вызывали (почти) проблем в других. А в идеале вообще это всё отрезать и иметь
какую-то схему взаимодействия с БД. Так, чтобы части мира можно было и по серверам
разным "разносить".

***
Я вот всё думаю... насколько реально сделать хорошо конфигурируемый "командами" движок?
Т.е. нечто, что можно будет затачивать написанием скриптов, а не исправлением дизайна.
Боюсь не хватит производительности в результате.
Хочется 90% логики "наружу" вытолкнуть. 
Надо билдеру скилл новый... да ради бога - пусть делает.


именно. Причём я бы в оставшиеся 10% внёс: сокеты, телнет, аккаунты, работа с базой 
	данных.... Всё наверное...


Да трудно сказать на самом деле, что должно быть снаружи, что внутри.
Вероятно "стоковый функционал" должен быть внутри. И иметь возможность отключаться 
	флагами.
К примеру команды передвижения, одевания-раздевания итп неразумно организовывать 
	снаружи.

Собственно список того, что должно быть "готово" меня и интересовало.
Давайте общими силами может составим ? Хуже не будет.

Вообще самое ценное в этой системе - непротиворечивый концепт.
-------------

По мне, так повторюсь, лучше-бы обсудить что точно должно быть "внутри". А не что 
	снаружи.


Как писал Эрендир - сокеты, телнет, аккаунты, работа с базой данных. Ну и очевидно:
1) код, который будет исполнять скрипты
2) код, который будет обрабатывать события и запускать для этих событий нужные скрипты
3) интерфейс для скриптов - работа с базой, с событиями и кучей всего, чего мне сейчас 
	в голову не пришло. Думаю, что права на те или иные функции интерфейса нужно ограничивать, 
	чтобы ушлый билдер не прицепил чего лишнего

//=====//
// ДВА //
//=====//
Конечно, это все базовые скрипты, которые нужно выделить в базовую библиотеку, в 
	которой будет создаваться модель персонажей, боев и всяких наворотов. Допустим, 
	если планируется наличие заклинаний и умений, которые парализуют персонажа, то 
	надо это состояние персонажа определять в базовом классе для всех заклинаний и 
	умений (да и для большинства команд).

Поддержка внешних библиотек-модулей? Я об этом что-то не подумал. Хотел все в один 
	модуль запихнуть.
P.S. если все это у нас получится обсудить и самое главное закодить, то будет некий 
	аналог Lua, но только для мадов (прикручивается например к любому маду (ну или 
	почти любому - все зависит от пряморукости того кто писал движок и, разумеется, 
	от пряморукости (ну или наоборот) разработчика, который занимается прикручиванием) 
	и т. д.

Боюсь скрипты на такие вещи сожрут всю производительность. Есть мнение, что некоторые 
	моменты должны быть в виде вызываемых процедур нижнего уровня. Это то, что 
	срабатывает очень часто, и мало модифицируется. 

Одевание-снимание вещей никак не связано с наличием пятой ноги.
В любом случае нужна слотовая система, а введение частей тела - это должно быть 
	довольно простой вещью.
У меня в прототипе движка все персонажи собирались из отдельных частей, на которые 
	можно было надевать вещи (или нельзя), и никак со скриптом одевания вещей это 
	связано не было.
Кстати для одевания снимание вещей были необходимы свободные руки, это приводило к 
	очень забавным ситуациям, когда проклятая вещь оставалась в руках, и ни бросить её, 
	ни взять оружие, ни переодеться, ни пожрать было уже нельзя.

Ну давайте подумаем на счет производительности. Хождение и осмотр - могут являться 
	источниками повышенной нагрузки, если пользователям разрешено на спидволках за 
	секунду пролетать полмада. Снять/одеть - в принципе то же спамиться может, в 
	обычных мадах такое ограничивает лишь ширина канала и быстродействие клента. 
	Но скрипты во всех этих случаях - простейшие и не используют каких-то сложных 
	алгоритмов и если скрипты будут тормозить уже на этом этапе, то нафига они вообще, 
	ведь будут и более сложные и потенциально более нагружающие систему?
Опять же, есть слотовая система одевания персонажу, но никто не запрещает же одевать 
	человеку 3 рубашки и реализовывать это в своем маде через удобный интерфейс?
PS: Отчасти эти вопросы являются провокационными. Если внезапно получить 
	увеличивающуюся многочисленную аудиторию, то вопрос производительности и 
	масштабируемости (вряд ли кто-то о нем задумывался) рано или поздно встанет. И 
	будет менее больно, если в движке часть функций реализована не скриптами, а внутри. 
	Но в свою очередь, это вызывает вопрос - а почему не делать движок так, чтобы скрипты 
	можно было бы реализовывать и на коде ядра? (кстати, еще провокационный вопрос: а 
	что будет в данном случае лучше - ядро на джаве или c/с++?)

Вопрос с производительностью не вполне праздный. Хотя... черт его знает, может и не 
	стоит об этом думать.
По мне, так надо выделить "общую" часть, и "настраиваемую".
И общую можно сделать hard coded.

Исходя из этого, имеет смысл сначала писать ядро так, как удобно: максимально выносить 
	логику в скрипты и т.п.; а уже получив хотя бы минимально рабочую версию заниматься 
	profiling, и, по необходимости, переносить функции из скриптов в ядро/библиотеки/etc.


Тут я в целом согласен, но только с той поправкой, что надо иметь возможность "всосать 
	лишнее внутрь". Заранее спланированную.
В целом профайлинг должен быть встроенный по-любому. В рантайме.
Причем, похоже, для каждого скрипта должен быть лимит времени на исполнение и решение, 
	которое будет принято в результате превышения этого времени. (выключить сервер, 
	отключить зону, отключить скилл итп). Ну и дальше можно извращаться, строить выборки 
	насколько скрипты далеко "по лимитам", периодически, и всасывать их "в код".

Хотя есть и иной подход.
Всё делаем внутри, по мере необходимости переносим то, что нам нужно наружу. 

А насчет подхода "внутри-наружу" - хотелось бы сделать мад такой, чтобы в движке 
	ничего менять не надо было и так далее. Чтобы человек сделал сборку и больше не 
	перекомпилировал у себя - все через внешние файлы и модули (в windows кстати есть 
	вариант подключать .dll файлы как-то, но их тоже надо кодить, так что это не 
	решение проблемы простоты, а решение проблемы перекомпиляции, что не совсем то 
	что хочется).

О взаимодействии игрока с сервером.
Как я понимаю, для взаимодействия игрока с сервером, создается специальный канал по 
	которому передаются данные. На мой взгляд, это минус. Этот канал можно 
	заблокировать, порты перекрыть, из-за чего у игрока нет возможности войти в игру. 
	Часто возникает необходимость в специальных плагинах для браузера, чтобы можно 
	было войти в игру (но обычно и через них все-равно нормально не поиграешь). 
	Из-за этого специального канала, становится необходимым наличие у игрока и 
	специального клиента для игры, что тоже является, на мой взгляд, минусом (я, 
	например, у себя на работе никакой программы установить не могу). Как было бы 
	замечательно, иметь возможность играть с любого места и любого устройства, 
	присоединенного к интернет. Возможен ли изначально обмен данными между игроком и 
	сервером по веб-стандартам?

О персонажах в игре
Что такое игровой персонаж? Это имя плюс набор умений, инвентарь и экипировка. Можно 
	ли как нибудь дополнить наше представление о персонаже? Можно, например, добавив 
	к вышеперечисленному игровое окружение (или окружающий мир). Персонаж: умения
	инвентарь экипировка игровое окружение + еще что-то 
Идея о меняющемся вместе с игроком мире не нова, но вроде бы нормально это реализовать 
	в играх пока получилось  мало у кого. Где еще это можно применить? Я размышлял 
	о том, как можно в маде реализовать тактический позиционный бой. И пришел к идее, 
	что не обязательно комнату мада представлять в виде маленького местечка, где игрок 
	с мобом обмениваются ударами "стенка на стенку", комната может быть достаточно 
	большой, чтобы оставлять место для маневров. Например, представим, что у комнаты 
	есть подзоны: "север", "восток", "запад", "юг" и т.д., и игроки и монстры в 
	комнате располагаются в разных таких подзонах. Тогда милишникам для боя надо 
	сблизиться, для дистационной атаки выбрать наилучшую траекторию, появляется 
	тактическое поле!

О бое.
Везде используется раундовая система боя. Система неплохая, но единственно возможная 
	ли? А если все реализовать через кулдауны, когда любое действие требует 
	определенного времени, не обязательно совпадающего по времени с действиями других. 
	Например, автоатака у одного раз в секунду, а у другого раз в 0,7 секунд. И так со 
	всеми действиями. Если в движке будет реализован бой так, то его легко можно будет 
	модифицировать и в стандартный раундовый, задав точку отсчета и задав кулдауны 
	кратными одному числу.


Тоже вставлю свои пять копеек.
1) Использование в движке морфологического анализатора (я когда-то использовал pymorphy), 
	чтобы отказаться к примеру от таких вещей, как ручное склонения слов. 
2) Мир должен жить без игрока. Например, игрок убил военачальника города => стража 
	разбежалась => в городе наступили беспорядки => из соседнего города пришли стражи и 
	захватили город => в городе снова все спокойно.
Для мобов, к примеру, можно использовать нейронные сети (сейчас куча готовых библиотек 
	для этого)
3) Использование п1 с каким-нибудь анализатором выражений, чтобы можно было отдавать 
	персонажу команды в произвольной форме (команда: "убей человека в красном плаще"), 
	от сокращений слов, в данном случае, придется отказаться


